// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	measureAccelerometerFieldNames          = builder.RawFieldNames(&MeasureAccelerometer{}, true)
	measureAccelerometerRows                = strings.Join(measureAccelerometerFieldNames, ",")
	measureAccelerometerRowsExpectAutoSet   = strings.Join(stringx.Remove(measureAccelerometerFieldNames, "create_time", "update_time"), ",")
	measureAccelerometerRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(measureAccelerometerFieldNames, "id", "create_time", "update_time"))
)

type (
	measureAccelerometerModel interface {
		Insert(ctx context.Context, data *MeasureAccelerometer) (sql.Result, error)
		FindAll(ctx context.Context) ([]*MeasureAccelerometer, error)
		FindOne(ctx context.Context, id string) (*MeasureAccelerometer, error)
		Update(ctx context.Context, data *MeasureAccelerometer) error
		Delete(ctx context.Context, id string) error
	}

	defaultMeasureAccelerometerModel struct {
		conn  sqlx.SqlConn
		table string
	}

	MeasureAccelerometer struct {
		Id         string    `db:"id"` // user id if list not empty
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		List       string    `db:"list"`
		Data       string    `db:"data"` // use float 32 array
		Time       string    `db:"time"` // JavaScript time in ms. if value less than 1 years, that's time spanã€‚every group of data started with absolute time
	}
)

func newMeasureAccelerometerModel(conn sqlx.SqlConn) *defaultMeasureAccelerometerModel {
	return &defaultMeasureAccelerometerModel{
		conn:  conn,
		table: `"public"."measure_accelerometer"`,
	}
}

func (m *defaultMeasureAccelerometerModel) Insert(ctx context.Context, data *MeasureAccelerometer) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, measureAccelerometerRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.List, data.Data, data.Time)
	return ret, err
}

func (m *defaultMeasureAccelerometerModel) FindOne(ctx context.Context, id string) (*MeasureAccelerometer, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", measureAccelerometerRows, m.table)
	var resp MeasureAccelerometer
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMeasureAccelerometerModel) Update(ctx context.Context, data *MeasureAccelerometer) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, measureAccelerometerRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.List, data.Data, data.Time)
	return err
}

func (m *defaultMeasureAccelerometerModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMeasureAccelerometerModel) tableName() string {
	return m.table
}
