// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	heartbeatAudioUserFieldNames          = builder.RawFieldNames(&HeartbeatAudioUser{}, true)
	heartbeatAudioUserRows                = strings.Join(heartbeatAudioUserFieldNames, ",")
	heartbeatAudioUserRowsExpectAutoSet   = strings.Join(stringx.Remove(heartbeatAudioUserFieldNames, "create_time", "update_time"), ",")
	heartbeatAudioUserRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(heartbeatAudioUserFieldNames, "id", "create_time", "update_time"))
)

type (
	heartbeatAudioUserModel interface {
		Insert(ctx context.Context, data *HeartbeatAudioUser) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*HeartbeatAudioUser, error)
		Update(ctx context.Context, data *HeartbeatAudioUser) error
		Delete(ctx context.Context, id string) error
	}

	defaultHeartbeatAudioUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	HeartbeatAudioUser struct {
		Id         string    `db:"id"` // user id if list not empty
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		List       string    `db:"list"`
		Data       string    `db:"data"` // use float 32 array
	}
)

func newHeartbeatAudioUserModel(conn sqlx.SqlConn) *defaultHeartbeatAudioUserModel {
	return &defaultHeartbeatAudioUserModel{
		conn:  conn,
		table: `"public"."heartbeat_audio_user"`,
	}
}

func (m *defaultHeartbeatAudioUserModel) Insert(ctx context.Context, data *HeartbeatAudioUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, heartbeatAudioUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.List, data.Data)
	return ret, err
}

func (m *defaultHeartbeatAudioUserModel) FindOne(ctx context.Context, id string) (*HeartbeatAudioUser, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", heartbeatAudioUserRows, m.table)
	var resp HeartbeatAudioUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHeartbeatAudioUserModel) Update(ctx context.Context, data *HeartbeatAudioUser) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, heartbeatAudioUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.List, data.Data)
	return err
}

func (m *defaultHeartbeatAudioUserModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultHeartbeatAudioUserModel) tableName() string {
	return m.table
}
