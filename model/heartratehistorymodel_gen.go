// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	heartRateHistoryFieldNames          = builder.RawFieldNames(&HeartRateHistory{}, true)
	heartRateHistoryRows                = strings.Join(heartRateHistoryFieldNames, ",")
	heartRateHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(heartRateHistoryFieldNames, "create_time", "update_time"), ",")
	heartRateHistoryRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(heartRateHistoryFieldNames, "id", "create_time", "update_time"))
)

type (
	heartRateHistoryModel interface {
		Insert(ctx context.Context, data *HeartRateHistory) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*HeartRateHistory, error)
		Update(ctx context.Context, data *HeartRateHistory) error
		Delete(ctx context.Context, id string) error
	}

	defaultHeartRateHistoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	HeartRateHistory struct {
		Id         string    `db:"id"` // user id if list not empty
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		List       string    `db:"list"`
		Data       string    `db:"data"` // use float 32 array
	}
)

func newHeartRateHistoryModel(conn sqlx.SqlConn) *defaultHeartRateHistoryModel {
	return &defaultHeartRateHistoryModel{
		conn:  conn,
		table: `"public"."heart_rate_history"`,
	}
}

func (m *defaultHeartRateHistoryModel) Insert(ctx context.Context, data *HeartRateHistory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3)", m.table, heartRateHistoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.List, data.Data)
	return ret, err
}

func (m *defaultHeartRateHistoryModel) FindOne(ctx context.Context, id string) (*HeartRateHistory, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", heartRateHistoryRows, m.table)
	var resp HeartRateHistory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHeartRateHistoryModel) Update(ctx context.Context, data *HeartRateHistory) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, heartRateHistoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.List, data.Data)
	return err
}

func (m *defaultHeartRateHistoryModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultHeartRateHistoryModel) tableName() string {
	return m.table
}
