// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	"iam26/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/act",
				Handler: ActGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/measure",
				Handler: MeasureGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/goal",
				Handler: GoalGetHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPut,
				Path:    "/act",
				Handler: ActPutHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/actList",
				Handler: ActListGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/actRecommend",
				Handler: ActRecommendGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/measure",
				Handler: MeasurePutHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/measureList",
				Handler: MeasureListGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/measureRecommend",
				Handler: MeasureRecommendGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/measureIndex",
				Handler: MeasureIndexGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/measureHeartrate",
				Handler: MeasureHeartRatePutHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/measureIndex",
				Handler: measureIndexPutHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/measureAccelerometer",
				Handler: MeasureAccelerometerPutHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/measureAccelerometerTraining",
				Handler: MeasureAccelerometerTrainingPutHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/trace",
				Handler: TraceGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/traceItem",
				Handler: TraceItemPutHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/traceItem",
				Handler: TraceItemDelHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/goal",
				Handler: GoalPutHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/goal",
				Handler: GoalDelHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/goalList",
				Handler: GoalListGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/goalRecommend",
				Handler: GoalRecommendGetHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/userJwt",
				Handler: UserJWTGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/userAvatar",
				Handler: UserAvatarGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user",
				Handler: UserGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/userSignOut",
				Handler: UserSignOutGetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/userAccountOccupied",
				Handler: UserAccountOccupiedGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/userSignUp",
				Handler: UserSignUpPostHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/userLogin",
				Handler: UserLoginPostHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/userResetPassword",
				Handler: UserPasswordPostHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/userSentSMS",
				Handler: UserSentSMSPostHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/userProfile",
				Handler: UserProfileGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/userProfile",
				Handler: UserProfilePutHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/userAvatar",
				Handler: UserAvatarPutHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
